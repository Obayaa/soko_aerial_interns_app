plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id("com.google.gms.google-services")
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

android {
    namespace = "com.example.soko_aerial_interns_app"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.example.soko_aerial_interns_app"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdk = 24
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
        }
    }
}

// Apply the Google services plugin
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.android.application'

flutter {
    source = "../.."
}

dependencies {
    // Firebase BoM (Bill of Materials) allows you to manage Firebase versions
    implementation(platform("com.google.firebase:firebase-bom:33.1.2"))

    // Add Firebase Analytics dependency
    implementation("com.google.firebase:firebase-analytics")

    // Add other Firebase dependencies as needed
    implementation("com.google.firebase:firebase-auth")
}

task printDebugKeyHash {
    doLast {
        def keystorePropertiesFile = rootProject.file("key.properties")
        def debugKeystore = "${System.properties['user.home']}/.android/debug.keystore"
        
        if (keystorePropertiesFile.exists()) {
            def keystoreProperties = new Properties()
            keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
            debugKeystore = keystoreProperties['storeFile']
        }
        
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'keytool', '-list', '-v', '-keystore', debugKeystore, '-alias', 'androiddebugkey', '-storepass', 'android', '-keypass', 'android'
            standardOutput = stdout
        }
        def stringOutput = stdout.toString()
        def sha1 = (stringOutput =~ /SHA1: (.+)/)[0][1]
        println "SHA1: $sha1"
    }
}